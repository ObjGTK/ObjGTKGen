{

GtkContainer = {

"-(void)addWidget:(CGTKWidget *)widget withProperties:(OFDictionary *)properties" =
"{
	CGTKTypeWrapper *wrapper;
	for(OFString *propName in properties) {
		wrapper = [properties objectForKey:propName];
		
		gtk_container_child_set_property([self CONTAINER], [widget WIDGET], [propName UTF8String], [wrapper asGValuePtr]);
	}
}";

};

GtkDialog = {

"-(id)initWithTitle:(OFString *)title andParent:(CGTKWindow *)parent andFlags:(GtkDialogFlags)flags andButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	self = [super initWithGObject:(GObject *)gtk_dialog_new_with_buttons([title UTF8String], [parent WINDOW], flags, NULL, NULL)];

	CGTKTypeWrapper *wrapper;
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
			
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}

	return self;
}";

"-(void)addButtons:(OFDictionary *)buttonTextDict" = 
"{
	CGTKTypeWrapper *wrapper;
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}
}";

};

GtkFileChooserDialog = {

"-(id)initWithTitle:(OFString *)title andParent:(CGTKWindow *)parent andAction:(GtkFileChooserAction)action andButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	self = [super initWithGObject:(GObject *)gtk_file_chooser_dialog_new([title UTF8String], [parent WINDOW], action, NULL, NULL)];

	CGTKTypeWrapper *wrapper;
	
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}

	return self;
}";

};

GtkMessageDialog = {

"-(id)initWithParent:(CGTKWindow *)parent andFlags:(GtkDialogFlags)flags andType:(GtkMessageType)type andButtons:(GtkButtonsType)buttons andMessage:(OFString *)message" = 
"{
	self = [super initWithGObject:(GObject *)gtk_message_dialog_new([parent WINDOW], flags, type, buttons, [message UTF8String], NULL)];

	return self;
}";

"-(id)initWithParent:(CGTKWindow *)parent andFlags:(GtkDialogFlags)flags andType:(GtkMessageType)type andButtons:(GtkButtonsType)buttons andMarkup:(OFString *)markup" = 
"{
	self = [super initWithGObject:(GObject *)gtk_message_dialog_new_with_markup([parent WINDOW], flags, type, buttons, [markup UTF8String], NULL)];

	return self;
}";

"-(void)formatSecondaryText:(OFString *)message" = 
"{
	gtk_message_dialog_format_secondary_text([self MESSAGEDIALOG], [message UTF8String], NULL);
}";

"-(void)formatSecondaryMarkup:(OFString *)markup" = 
"{
	gtk_message_dialog_format_secondary_markup([self MESSAGEDIALOG], [markup UTF8String], NULL);
}";

};

GtkRecentChooserDialog = {

"-(id)initWithTitle:(OFString *)title andParent:(CGTKWindow *)parent andButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	self = [super initWithGObject:(GObject *)gtk_recent_chooser_dialog_new([title UTF8String], [parent WINDOW], NULL, NULL)];

	CGTKTypeWrapper *wrapper;
	
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}

	return self;
}";

"-(id)initForManagerWithTitle:(OFString *)title andParent:(CGTKWindow *)parent andManager:(GtkRecentManager*)manager andButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	self = [super initWithGObject:(GObject *)gtk_recent_chooser_dialog_new_for_manager([title UTF8String], [parent WINDOW], manager, NULL, NULL)];

	CGTKTypeWrapper *wrapper;
	
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}

	return self;
}";

};

GtkInfoBar = {

"-(id)initWithButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	self = [super initWithGObject:(GObject *)gtk_info_bar_new()];

	CGTKTypeWrapper *wrapper;
	
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}

	return self;
}";

"-(void)addButtonTextResponseDictionary:(OFDictionary *)buttonTextDict" = 
"{
	CGTKTypeWrapper *wrapper;
	
	for(OFString *text in buttonTextDict) {
		wrapper = [buttonTextDict objectForKey:text];
		
		[self addButtonWithButtonText:text andResponseId:wrapper.gintValue];
	}
}";

};

}
